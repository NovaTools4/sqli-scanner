#!/bin/python3

import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
from pprint import pprint
from user_agent import generate_user_agent
import os
import random
import time
from cfonts import *

os.system('chmod +x sqli-scanner')
if os.path.exists('/usr/bin/sqli-scanner'):
    pass
else:
    os.system('cp sqli-scanner /usr/bin')
    os.remove('sqli-scanner')

F = '\033[2;32m'
Z = '\033[1;31m'
X = '\033[1;33m' 
F = '\033[2;32m'
A = '\033[2;34m'
C = '\033[2;35m' 
B = '\033[2;36m'
Y = '\033[1;34m' 
G = ['red','green','blue']
v = str(random.choice(G))
b = str(random.choice(G))
k = str(random.choice(G))

connect = 0

def logo():
        os.system('clear')
        ar = render('Mr Aws',colors=[v, b, k],align='center')
        for ar in ar.splitlines():
                time.sleep(0.10)
                print(ar)


s = requests.Session()
s.headers["User-Agent"] = generate_user_agent()

def get_all_forms(url):
    soup = bs(s.get(url).content, "html.parser")
    return soup.find_all("form")


def get_form_details(form):
    details = {}

    try:
        action = form.attrs.get("action").lower()
    except:
        action = None

    method = form.attrs.get("method", "get").lower()
    
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({"type": input_type, "name": input_name, "value": input_value})
    
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details
    
def is_vulnerable(response):
    errors = {
        # MySQL
        "you have an error in your sql syntax;",
        "warning: mysql",
        # SQL Server
        "unclosed quotation mark after the character string",
        # Oracle
        "quoted string not properly terminated",
    }
    for error in errors:
        if error in response.content.decode().lower():
            return True
    return False

def scan_sql_injection(url,file):
    for c in "\"'":
        new_url = f"{url}{c}"
        print("[!] Trying", new_url)
        res = s.get(new_url)
        if is_vulnerable(res):

            print("[+] SQL Injection vulnerability detected, link : ", url)
            new = open(str(file), 'a')
            new.write(url)
            new.close()
            return
    forms = get_all_forms(url)
    print()
    print(f"[+] Detected {len(forms)} forms on {url}.")
    print()
    for form in forms:
        form_details = get_form_details(form)
        for c in "\"'":
            data = {}
            for input_tag in form_details["inputs"]:
                if input_tag["type"] == "hidden" or input_tag["value"]:
                    try:
                        data[input_tag["name"]] = input_tag["value"] + c
                    except:
                        pass
                elif input_tag["type"] != "submit":
                    data[input_tag["name"]] = f"test{c}"
            url = urljoin(url, form_details["action"])
            if form_details["method"] == "post":
                res = s.post(url, data=data)
            elif form_details["method"] == "get":
                res = s.get(url, params=data)
            if is_vulnerable(res):
                print("[+] SQL Injection vulnerability detected, link : ", url)
                print("[+] Form : ")
                pprint(form_details)
                break
                
if __name__ == "__main__":
        logo()
        print('')
        url = input("[+] Enter List File : ")
        output = input('[+] Enter Output File : ')
        try:
            file = open(url, 'r')
            for i in file:
                print('')
                scan_sql_injection(i,output)
        except FileNotFoundError:
            print('')
            print('[-] Please Enter File')
